// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// onewire //
// ------- //

#define onewire_wrap_target 4
#define onewire_wrap 10

#define onewire_offset_reset 0u
#define onewire_offset_start 8u
#define onewire_offset_waiting 9u

static const uint16_t onewire_program_instructions[] = {
    0xb642, //  0: nop                    side 1 [6] 
    0xa042, //  1: nop                    side 0     
    0x4601, //  2: in     pins, 1         side 0 [6] 
    0x0008, //  3: jmp    8               side 0     
            //     .wrap_target
    0x5f01, //  4: in     pins, 1         side 1 [15]
    0x1108, //  5: jmp    8               side 1 [1] 
    0xa242, //  6: nop                    side 0 [2] 
    0x4e01, //  7: in     pins, 1         side 0 [14]
    0xa202, //  8: mov    pins, y         side 0 [2] 
    0x6021, //  9: out    x, 1            side 0     
    0x1146, // 10: jmp    x--, 6          side 1 [1] 
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program onewire_program = {
    .instructions = onewire_program_instructions,
    .length = 11,
    .origin = -1,
};

static inline pio_sm_config onewire_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + onewire_wrap_target, offset + onewire_wrap);
    sm_config_set_sideset(&c, 1, false, true);
    return c;
}

/* Configure a PIO/sm for onewire */
/* Note on pinctlz: GPIO pins have pulldown after reset. This enables
   the external transistor initially and causes some glitches during
   pin configuraion. Add external pullup to +3V3 (e.g. 12k). */
/* TODO: We could implement an option by which pinctlz is disabled.
   We do not need to change the PIO code, just avoid anything that
   configures pinctlz in the PIO mapping. */
void onewire_program_init(
     PIO pio,       /* pio object (pio0/pio1) */ 
     uint sm,       /* state machine number */
     uint offset,   /* onewire code offset in PIO instr. memory */ 
     uint pin,      /* Pin number for 1-Wire data signal */ 
     uint pinctlz   /* Pin number for external FET strong pullup */ 
)
{
    uint div;
    pio_sm_config c = onewire_program_get_default_config(offset);
    //sm_config_set_out_pins(&c, pinctlz, 1);
    //sm_config_set_set_pins(&c, pinctlz, 1);
    sm_config_set_in_pins(&c, pin);
    sm_config_set_sideset_pins(&c, pin);
    div = clock_get_hz(clk_sys)/1000000 * 3;
    sm_config_set_clkdiv_int_frac(&c, div, 0);
    sm_config_set_out_shift(&c, true, true, 8); 
    sm_config_set_in_shift(&c, true, true, 8); 
    gpio_init(pin);
    gpio_set_dir(pin, 0);
    gpio_pull_up(pin);
    //gpio_init(pinctlz);
    //gpio_put(pinctlz, 1);
    //gpio_set_dir(pinctlz, 1);
    //pio_sm_set_pins_with_mask(pio, sm, 1<<pin, 1<<pin);
    //pio_sm_set_pindirs_with_mask(pio, sm, 1<<pin, 1<<pin);
    pio_gpio_init(pio, pin);
    //   gpio_set_oeover(pin, GPIO_OVERRIDE_INVERT); // see above
    pio_sm_set_pins_with_mask(pio, sm, 0, 1<<pin);
    //pio_gpio_init(pio, pinctlz);
    //pio_sm_set_pins_with_mask(pio, sm, 1<<pinctlz, 1<<pinctlz);
    //pio_sm_set_pindirs_with_mask(pio, sm, 1<<pinctlz, 1<<pinctlz);
    /* Preload register y with 1 to keep pinctlz = high when
       state machine starts running */
    pio_sm_exec(pio, sm, pio_encode_set(pio_y, 1));
    pio_sm_init(pio, sm, offset + onewire_offset_start, &c);
}

#endif

