// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// rpm //
// --- //

#define rpm_wrap_target 0
#define rpm_wrap 2

static const uint16_t rpm_program_instructions[] = {
            //     .wrap_target
    0x2920, //  0: wait   0 pin, 0               [9] 
    0x29a0, //  1: wait   1 pin, 0               [9] 
    0x0080, //  2: jmp    y--, 0                     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program rpm_program = {
    .instructions = rpm_program_instructions,
    .length = 3,
    .origin = -1,
};

static inline pio_sm_config rpm_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + rpm_wrap_target, offset + rpm_wrap);
    return c;
}

#include "hardware/gpio.h"
#include "hardware/clocks.h"
static inline void rpm_program_init(PIO pio, uint sm, uint offset, uint pin) {
   pio_gpio_init(pio, pin);
   pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);
   pio_sm_config c = rpm_program_get_default_config(offset);
   sm_config_set_in_pins(&c, pin); // pin is used for Wait instruction
   float div = (float)clock_get_hz(clk_sys) / (1000000 / 10 ); //divide by 10 because we add a delay of 9 in WAIT instruction 
   sm_config_set_clkdiv(&c, div);
   pio_sm_init(pio, sm, offset, &c);  // sm is left disabled at the end
   pio_sm_set_enabled(pio, sm, true); // start the state machine
}

#endif

